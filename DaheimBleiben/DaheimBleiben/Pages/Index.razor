@page "/"
@using System.Threading
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using DaheimBleiben.Data
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@inject IJSRuntime JsRuntime

<h1>Servus Bayern!</h1>

Wir bleiben daheim! Du auch?

<p>So viele bleiben heute daheim: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Ich bleibe daheim!</button>

<ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="600" Height="300" />

@code {
    private long currentCount = 0;

    LineConfig _lineConfig;
    ChartJsLineChart _lineChartJs;
    const string DeCh = "de-ch";
    LineDataset<TimeTuple<long>> _tempDataSet;
    private bool _localeChangeWasAttempted = false;

    private CoronaService _coronaService;

    private void IncrementCount()
    {
        currentCount++;
        CoronaService service = new CoronaService();
        service.Update();
    }

    protected override async Task OnInitializedAsync()
    {
        _coronaService = new CoronaService();
        currentCount = _coronaService.GetCurrentNumber();

        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Verlauf der letzten vierzehn Tage"
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Day,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Zeit"
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        _tempDataSet = new LineDataset<TimeTuple<long>>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = "Anzahl Klicks",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        _tempDataSet.AddRange(_coronaService.GetData());
        _lineConfig.Data.Datasets.Add(_tempDataSet);
    }

    private async Task TryChangeLocale()
    {
        if (_localeChangeWasAttempted) return;
        _localeChangeWasAttempted = true;

        var locales = await JsRuntime.GetAvailableLocales();
        bool localeChanged = false;
        if (locales != null && locales.Contains(DeCh))
        {
            localeChanged = await JsRuntime.ChangeLocale(DeCh);
        }

        if (!localeChanged) Console.WriteLine($"Locale was not changed to {DeCh}. Either it already is {DeCh} or this locale doesn't exist.");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await TryChangeLocale();
    }

    private PieConfig _config;
    private ChartJsPieChart _pieChartJs;

    protected override void OnInitialized()
    {

    }

}

